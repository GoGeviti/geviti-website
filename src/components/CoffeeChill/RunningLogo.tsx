'use client';

import React from 'react';
import Marquee from 'react-fast-marquee';

import { BDSupperRegular } from '@/constant/fonts';
import clsxm from '@/helpers/clsxm';

const RunningLogoCoffeeChill: React.FC = () => {
	const keywordsData = Array.from(Array(4).keys());

	const renderGeviti = (keywordIdx: number, section: number) => (
		<span
			key={ `keyword-${section}-${keywordIdx}` }
			className='pl-[22px] flex items-center gap-x-2.5'
		>
			<span className='flex items-center justify-center'>
				<svg
					width='37'
					height='37'
					viewBox='0 0 37 37'
					fill='none'
					xmlns='http://www.w3.org/2000/svg'
				>
					<path
						d='M10.792 26.2096L26.2087 10.793M26.2087 10.793H10.792M26.2087 10.793V26.2096'
						stroke='#EE4124'
						strokeWidth='3.59941'
						strokeLinecap='round'
						strokeLinejoin='round'
					/>
				</svg>
			</span>
			<span>
				<svg
					width='113'
					height='27'
					viewBox='0 0 113 27'
					fill='none'
					xmlns='http://www.w3.org/2000/svg'
				>
					<g clipPath='url(#clip0_226_1224)'>
						<path
							d='M111.456 23.9807C111.456 23.6211 111.331 23.3755 111.087 23.2469C110.891 23.1445 110.664 23.1445 110.525 23.1445C110.415 23.1445 110.148 23.1445 109.995 23.1445H109.368V25.58H109.995V24.8169C110.125 24.8169 110.398 24.8169 110.511 24.8169L110.871 25.5829H111.555L111.11 24.659C111.297 24.545 111.459 24.3725 111.459 23.9836L111.456 23.9807ZM110.866 23.9807C110.866 24.0889 110.826 24.1561 110.738 24.1912C110.659 24.2263 110.559 24.2263 110.488 24.2263H109.992V23.7351H110.491C110.727 23.7351 110.863 23.7761 110.863 23.9807H110.866Z'
							fill='#EE4124'
						/>
						<path
							d='M110.44 21.7227C109.027 21.7227 107.877 22.9071 107.877 24.3634C107.877 25.8198 109.027 27.0042 110.44 27.0042C111.853 27.0042 113.003 25.8198 113.003 24.3634C113.003 22.9071 111.853 21.7227 110.44 21.7227ZM112.514 24.3634C112.514 25.542 111.584 26.5012 110.44 26.5012C109.296 26.5012 108.366 25.542 108.366 24.3634C108.366 23.1849 109.296 22.2257 110.44 22.2257C111.584 22.2257 112.514 23.1849 112.514 24.3634Z'
							fill='#EE4124'
						/>
						<path
							d='M91.2148 26.9713C95.5171 26.9713 97.1007 26.7403 97.5832 26.6409V21.5725C97.1348 21.5989 96.7176 21.6252 96.3288 21.6515C93.6583 21.8211 92.3188 21.9059 91.5724 21.1836C91.1382 20.7624 90.9509 20.0985 90.9509 18.9609V18.2678V10.7808H97.5832V6.51674H90.9509V0.433594L85.9333 0.433594V6.51382H83.2061V10.7779H85.9333V19.4873C85.9333 22.6459 85.9333 26.9713 91.2119 26.9713H91.2148Z'
							fill='#EE4124'
						/>
						<path
							d='M80.3314 6.58203H75.3423V26.9694H80.3314V6.58203Z'
							fill='#EE4124'
						/>
						<path
							d='M80.3312 0L75.3423 0V4.54168H80.3312V0Z'
							fill='#EE4124' />
						<path
							d='M105.348 6.58203H100.359V26.9694H105.348V6.58203Z'
							fill='#EE4124'
						/>
						<path
							d='M44.865 20.1905C44.3741 21.2931 42.9835 22.5214 39.2317 22.5214C35.4799 22.5214 33.78 21.1089 33.3713 18.0761L33.3287 17.7661H49.8968C50.1238 15.3094 49.8882 11.1038 46.3039 8.39859L45.9974 8.18217C44.2066 6.89828 41.9306 6.24609 39.2317 6.24609C32.4206 6.24609 28.5127 10.0217 28.5127 16.6079C28.5127 23.1941 32.2191 26.9697 39.2317 26.9697C45.3276 26.9697 49.051 24.5657 49.752 20.1876H44.865V20.1905ZM33.5927 14.1864C34.2965 11.8379 36.1411 10.6973 39.2317 10.6973C43.3553 10.6973 44.4195 12.5632 44.8849 14.1893L44.9842 14.5373H33.4876L33.5927 14.1834V14.1864Z'
							fill='#EE4124'
						/>
						<path
							d='M105.348 0L100.359 0V4.54168H105.348V0Z'
							fill='#EE4124' />
						<path
							d='M67.8866 6.60938L61.9298 22.4197H61.0017L55.0448 6.60938H49.7549L57.4259 26.9704H65.5084L73.1766 6.60938L67.8866 6.60938Z'
							fill='#EE4124'
						/>
						<path
							d='M13.5166 14.5806V19.2951H17.8105L17.3451 19.763C15.0775 22.0325 11.9558 21.7078 11.3541 21.6201C7.31853 21.0323 5.00559 18.2393 5.00559 13.9548C5.00559 9.07069 7.98545 6.15779 12.9831 6.15779C14.7654 6.15779 16.6895 6.38591 18.2163 7.40952C18.8577 7.83943 19.4196 8.41558 19.7715 9.12333C20.149 9.87787 20.2483 10.802 20.2483 11.6414H25.6149C25.6149 10.9512 25.6035 10.2493 25.4929 9.56787C25.192 7.7049 24.1562 5.98817 22.8592 4.68087C21.6304 3.44085 20.1206 2.51375 18.5171 1.89081C16.7548 1.20354 14.8675 0.878906 12.9831 0.878906C5.21844 0.878906 -0.00341797 6.13147 -0.00341797 13.9548C-0.00341797 16.0224 0.3343 17.9176 0.995546 19.5846C1.61422 21.1405 2.55926 22.553 3.72851 23.6556C4.86369 24.7377 6.23159 25.5771 7.78963 26.1503C9.72797 26.8639 11.811 27.1242 13.8004 26.9078C16.0084 26.6679 18.0375 25.9076 19.658 24.7026C19.9588 24.4804 20.2568 24.2405 20.5293 23.9832L20.9691 23.5796V27.0043H25.6433V14.5806H13.5138H13.5166Z'
							fill='#EE4124'
						/>
					</g>
					<defs>
						<clipPath id='clip0_226_1224'>
							<rect
								width='113'
								height='27'
								fill='white' />
						</clipPath>
					</defs>
				</svg>
			</span>
		</span>
	);

	const renderCoffeeChill = (keywordIdx: number, section: number) => (
		<span
			key={ `keyword-${section}-${keywordIdx}` }
			className='pl-[22px] flex items-center gap-x-3'
		>
			<div className='bg-[var(--red-coffee-chill)] w-1.5 h-1.5 rounded' />
			<span className='text-[var(--red-coffee-chill)] flex items-center justify-center -tracking-[4%] text-[26.21px]/7 font-bold'>
        COFFEE & CHILL
			</span>
			<div className='bg-[var(--red-coffee-chill)] w-1.5 h-1.5 rounded' />
		</span>
	);

	return (
		<div
			className={ clsxm(
				BDSupperRegular.className,
				'relative flex justify-center overflow-hidden select-none bg-[#F4F2E7] py-5'
			) }
			style={
        {
        	'--red-coffee-chill': '#EE4124',
        } as React.CSSProperties
			}
		>
			<Marquee autoFill>
				{ keywordsData.map((idx, index) => {
					if (idx % 2 === 0) return renderGeviti(idx, index);
					return renderCoffeeChill(idx, index);
				}) }
			</Marquee>
		</div>
	);
};

export default RunningLogoCoffeeChill;
